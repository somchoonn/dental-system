// routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const db = require('../db'); // mysql2/promise
const jwt = require('jsonwebtoken');

// ============================================================================
// üß© Patient Registration
// ============================================================================
router.get('/register', (req, res) => {
  res.render('register', {
    title: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ | Dentalcare Clinic',
    message: null,
    from: req.query.from || 'login'
  });
});

router.post('/register', async (req, res) => {
  const {
    citizen_id, password, confirm_password, pre_name, first_name, last_name,
    gender, birth_date, phone, email, address, race, nationality,
    religion, drug_allergy
  } = req.body;

  const from = req.body.from || 'login';
  const renderError = (message) => {
    res.render('register', {
      title: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ | Dentalcare Clinic',
      message,
      from
    });
  };

  if (!citizen_id || !password || !first_name || !last_name) {
    return renderError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
  }
  if (password !== confirm_password) {
    return renderError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
  }

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [existing] = await db.query('SELECT id FROM users WHERE citizen_id = ?', [citizen_id]);
    if (existing.length > 0) {
      return renderError('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    const [userResult] = await db.query(
      `INSERT INTO users (citizen_id, password, role, username) VALUES (?, ?, 'patient')`,
      [citizen_id, hashedPassword]
    );
    const userId = userResult.insertId;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• patient
    await db.query(
      `INSERT INTO patients (
        user_id, pre_name, first_name, last_name, gender, birth_date, phone, email, 
        address, race, nationality, religion, drug_allergy
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        userId, pre_name, first_name, last_name, gender, birth_date, phone, email,
        address, race, nationality, religion, drug_allergy || '‡πÑ‡∏°‡πà‡∏°‡∏µ'
      ]
    );

    // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí redirect
    if (from === 'patients') return res.redirect('/');
    res.redirect('/login?success=registration_successful');

  } catch (err) {
    console.error('Registration error:', err);
    renderError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
  }
});

// ============================================================================
// üß© Dentist Registration
// ============================================================================
router.get('/dentist/register', (req, res) => {
  res.render('dentists/register', { message: null });
});

router.post('/dentist/register', async (req, res) => {
  const {
    license_number, pre_name, first_name, last_name, citizen_id,
    phone, password, confirm_password, email, specialty
  } = req.body;

  const renderError = (message) => {
    res.render('dentists/register', { message });
  };

  if (password !== confirm_password) {
    return renderError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
  }
  if (!email) {
    return renderError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
  }

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥
    const [existing] = await db.query('SELECT id FROM users WHERE citizen_id = ?', [citizen_id]);
    if (existing.length > 0) {
      return renderError('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }

    // Insert user
    const [userResult] = await db.query(
      `INSERT INTO users (citizen_id, password, role) VALUES (?, ?, 'dentist')`,
      [citizen_id, hashedPassword]
    );
    const userId = userResult.insertId;

    // Insert dentist
    await db.query(
      `INSERT INTO dentists (
        user_id, license_number, pre_name, first_name, last_name, phone, email, speciality
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [userId, license_number, pre_name, first_name, last_name, phone, email, specialty || null]
    );

    res.redirect('/login?success=dentist_registration_successful');

  } catch (err) {
    console.error('Dentist register error:', err);
    if (err.code === 'ER_DUP_ENTRY') {
      return renderError('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•) ‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    }
    renderError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
  }
});

// ============================================================================
// üß© Login
// ============================================================================
router.get('/login', (req, res) => {
  const { success } = req.query;
  let message = null;
  if (success === 'registration_successful') {
    message = '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
  } else if (success === 'dentist_registration_successful') {
    message = '‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
  }
  res.render('login', { title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö | Dentalcare Clinic', message });
});

router.post('/login', async (req, res) => {
  const { citizen_id, password } = req.body;

  try {
    const [rows] = await db.query('SELECT * FROM users WHERE citizen_id = ? LIMIT 1', [citizen_id]);
    const user = rows[0];

    if (!user) {
      return res.render('login', { title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.render('login', { title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const token = jwt.sign(
      { id: user.id, citizen_id: user.citizen_id, role: user.role },
      'secret-key',
      { expiresIn: '1h' }
    );

    res.cookie("token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 3600000
    });

    let redirectUrl = '/patient/dashboard';
    if (user.role === 'dentist') redirectUrl = '/dentist/patients';
    else if (user.role === 'staff') redirectUrl = '/staff/patients';

    res.redirect(redirectUrl);
  } catch (err) {
    console.error('Login error:', err);
    res.render('login', { title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
});

// ============================================================================
// üß© Logout
// ============================================================================
router.get('/logout', (req, res) => {
  res.clearCookie('token');
  res.redirect('/login');
});

router.post('/api/staff/register', async (req, res) => {
  try {
    const { citizen_id, password } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (!citizen_id || !password) {
      return res.status(400).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å citizen_id ‡πÅ‡∏•‡∏∞ password'
      });
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (bcrypt)
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ table users
    const [userResult] = await db.query(
      `INSERT INTO users (citizen_id, password, role)
       VALUES (?, ?, 'staff')`,
      [citizen_id, hashedPassword]
    );

    res.json({
      success: true,
      message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô staff ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      userId: userResult.insertId
    });

  } catch (err) {
    console.error('Register Staff API Error:', err);

    // ‡∏ñ‡πâ‡∏≤ duplicate (citizen_id ‡∏ã‡πâ‡∏≥)
    if (err.code === 'ER_DUP_ENTRY') {
      return res.status(400).json({
        success: false,
        error: 'citizen_id ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ' + err.message
    });
  }
});
module.exports = router;
